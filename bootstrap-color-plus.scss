@use "bootstrap-color" as bscol;



$add-black      :   true    !default;
$transp-var     :   0.25    !default;
$var-root       : ":root"   !default;
$var-prefix     : ""        !default;



/* begin: re-export variables */
$white          : bscol.$white !default;
$gray-100       : bscol.$gray-100 !default;
$gray-200       : bscol.$gray-200 !default;
$gray-300       : bscol.$gray-300 !default;
$gray-400       : bscol.$gray-400 !default;
$gray-500       : bscol.$gray-500 !default;
$gray-600       : bscol.$gray-600 !default;
$gray-700       : bscol.$gray-700 !default;
$gray-800       : bscol.$gray-800 !default;
$gray-900       : bscol.$gray-900 !default;
$black          : bscol.$black !default;

$grays          : bscol.$grays !default;

$blue           : bscol.$blue !default;
$indigo         : bscol.$indigo !default;
$purple         : bscol.$purple !default;
$pink           : bscol.$pink !default;
$red            : bscol.$red !default;
$orange         : bscol.$orange !default;
$yellow         : bscol.$yellow !default;
$green          : bscol.$green !default;
$teal           : bscol.$teal !default;
$cyan           : bscol.$cyan !default;

$colors         : bscol.$colors !default;

$primary        : bscol.$primary !default;
$secondary      : bscol.$secondary !default;
$success        : bscol.$success !default;
$info           : bscol.$info !default;
$warning        : bscol.$warning !default;
$danger         : bscol.$danger !default;
$light          : bscol.$light !default;
$dark           : bscol.$dark !default;

$theme-colors   : bscol.$theme-colors !default;

// Set a specific jump point for requesting color jumps
$theme-color-interval       : bscol.$theme-color-interval !default;

// The yiq lightness value that determines when the lightness of color changes from "dark" to "light". Acceptable values are between 0 and 255.
$yiq-contrasted-threshold   : bscol.$yiq-contrasted-threshold !default;

// Customize the light and dark text colors for use in our YIQ color contrast function.
$yiq-text-dark              : bscol.$yiq-text-dark !default;
$yiq-text-light             : bscol.$yiq-text-light !default;
/* end: re-export variables */



// add black to the color list:
@if ($add-black == true) {
    @if (map-has-key($colors, "black") == false) {
        $colors: map-merge($colors, (
            "black":  $black
        ));
    }
}



@if (($transp-var > 0) and ($transp-var < 1)) {
    /* begin: add transparent version of $colors */
    $colors-transp: () !default;
    @each $color, $value in $colors {
        $colors-transp: map-merge($colors-transp, (
            #{$color}-transp: change-color($value, $alpha: $transp-var)
        ));
    }
    $colors: map-merge($colors,
        $colors-transp
    );
    /* end: add transparent version of $colors */

    
    /* begin: add transparent version of $theme-colors */
    $theme-colors-transp: () !default;
    @each $color, $value in $theme-colors {
        $theme-colors-transp: map-merge($theme-colors-transp, (
            #{$color}-transp: change-color($value, $alpha: $transp-var)
        ));
    }
    $theme-colors: map-merge($theme-colors,
        $theme-colors-transp
    );
    /* end: add transparent version of $theme-colors */
}



$_cssvar: "";
@if (($var-prefix == null) or ($var-prefix == "")) {
    $_cssvar: "--";
} @else {
    $_cssvar: "--#{$var-prefix}-";
}
@mixin css-vars {
    @each $color, $value in $colors {
        #{$_cssvar}#{$color}: #{$value};
    }
    
    @each $color, $value in $theme-colors {
        #{$_cssvar}#{$color}: #{$value};
    }
}
@if ($var-root) {
    #{$var-root} { @include css-vars; }
}
