// A set of common color definitions.



@forward "bootstrap-colors";
@forward "functions";



@use "@heymarco/sass-class-template/src/index" as *;
@use "@heymarco/sass-selector/src/index"       as selector;
@use "@heymarco/sass-string/src/index"         as string;
@use "bootstrap-colors"                        as *;
@use "sass:map"                                as map;



$alias              : "%color"                              !default;
$class              : ""                                    !default;
$var-root           : ":root"                               !default;
$var-prefix         : "col"                                 !default;
$var-prefix-base    : ""                                    !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);
$_cssvar: $cssvar;

$contrast-dark      : var(#{$cssvar}black)                  !default;
$contrast-light     : var(#{$cssvar}white)                  !default;
$contrast-threshold : calc(((1 + 0.05) / var(#{$cssvar}contrast-ratio-min)) - 0.05) !default;



@include declare-cssvar($var-root) {
    #{$cssvar}contrast-dark         : $contrast-dark;
    #{$cssvar}contrast-light        : $contrast-light;
    #{$cssvar}contrast-ratio-min    : $contrast-ratio-min;
    #{$cssvar}contrast-threshold    : $contrast-threshold;



    @each $name, $value in $colors {
        #{$cssvar}#{$name} : #{$value};
    }

    @each $name, $value in $colors-transp {
        #{$cssvar}#{$name} : #{$value};
    }

    @each $name, $value in $themes {
        #{$cssvar}#{$name} : #{$value};
    }

    @each $name, $value in $themes-transp {
        #{$cssvar}#{$name} : #{$value};
    }
}



/* begin: mixins */
@mixin themes-validate-name($theme-name) {
    @if (not map.has-key($themes, $theme-name)) { @error "\"#{$theme-name}\" is not a valid theme name."; }
}
@mixin has-no-theme {
    $names: "";
    @each $name, $value in $themes {
        $names: $names + "." + $name + ", ";
    }

    // remove the last ", "
    $names: string.slice($names, 1, -3);
    
    @include selector.append-not($names) {
        @content;
    }
}


@mixin cssvar-rgb($cssvar: $cssvar, $name: "color", $suffix: "") {
    // https://css-tricks.com/converting-color-spaces-in-javascript/

    // c = (1 - Math.abs(2 * l - 1)) * s
    // x = c * (1 - Math.abs(((h / 60%) % 2) - 1))
    // m = l - c/2



    // c = (1 -  abs(2 * l - 1) ) * s
    // c = (1 - [abs(2 * l - 1)]) * s
    // c = (1 - [(2 * l - 1) * clamp(-1, (2 * l - 1) * 999, 1)]) * s
    // --------------------------------------------------------------


    // x = c * (1 -  abs(((h / 60%) % 2) - 1))
    // x = c * (1 -  abs(((h % 120%) / 60) - 1))

    // d = h % 120%
    // d = h - (clamp(0, ((h - 120) * 999) + 1, 1) + clamp(0, ((h - 240) * 999) + 1, 1) + clamp(0, ((h - 360) * 999) + 1, 1)) * 120
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // x = c * (1 -  abs((d / 60) - 1))
    // x = c * (1 -    [((d / 60) - 1) * clamp(-1, ((d / 60) - 1) * 999, 1)])
    // -----------------------------------------------------------------------

    // m = l - c / 2
    // -------------



    
    //         if (300 <= h && h < 360) {         clamp(0, ((h - 300) * 999) + 1, 1)  *   clamp(0, (360 - h) * 999, 1)
    //     r = c; g = 0; b = x;
    // }
    // else if (0 <= h   && h < 60)  {         clamp(0, ((h - 0) * 999) + 1, 1)    *   clamp(0, (60 - h) * 999, 1)
    //     r = c; g = x; b = 0;
    // }

    // else if (60 <= h  && h < 120) {         clamp(0, ((h - 60) * 999) + 1, 1)   *   clamp(0, (120 - h) * 999, 1)
    //     r = x; g = c; b = 0;
    // }
    // else if (120 <= h && h < 180) {         clamp(0, ((h - 120) * 999) + 1, 1)  *   clamp(0, (180 - h) * 999, 1)
    //     r = 0; g = c; b = x;
    // }

    // else if (180 <= h && h < 240) {         clamp(0, ((h - 180) * 999) + 1, 1)  *   clamp(0, (240 - h) * 999, 1)
    //     r = 0; g = x; b = c;
    // }
    // else if (240 <= h && h < 300) {         clamp(0, ((h - 240) * 999) + 1, 1)  *   clamp(0, (300 - h) * 999, 1)
    //     r = x; g = 0; b = c;
    // }


    // r = m
    //     +
    //     (c * clamp(0, clamp(0, ((h - 300) * 999) + 1, 1) * clamp(0, (360 - h) * 999, 1) + clamp(0, ((h - 0) * 999) + 1, 1) * clamp(0, (60 - h) * 999, 1), 1))
    //     +
    //     (x * clamp(0, clamp(0, ((h - 60) * 999) + 1, 1) * clamp(0, (120 - h) * 999, 1) + clamp(0, ((h - 240) * 999) + 1, 1) * clamp(0, (300 - h) * 999, 1), 1))
    
    // g = m
    //     +
    //     (c * clamp(0, clamp(0, ((h - 60) * 999) + 1, 1) * clamp(0, (120 - h) * 999, 1) + clamp(0, ((h - 120) * 999) + 1, 1) * clamp(0, (180 - h) * 999, 1), 1))
    //     +
    //     (x * clamp(0, clamp(0, ((h - 0) * 999) + 1, 1) * clamp(0, (60 - h) * 999, 1) + clamp(0, ((h - 180) * 999) + 1, 1) * clamp(0, (240 - h) * 999, 1), 1))
    
    // b = m
    //     +
    //     (c * clamp(0, clamp(0, ((h - 180) * 999) + 1, 1) * clamp(0, (240 - h) * 999, 1) + clamp(0, ((h - 240) * 999) + 1, 1) * clamp(0, (300 - h) * 999, 1), 1))
    //     +
    //     (x * clamp(0, clamp(0, ((h - 300) * 999) + 1, 1) * clamp(0, (360 - h) * 999, 1) + clamp(0, ((h - 120) * 999) + 1, 1) * clamp(0, (180 - h) * 999, 1), 1))

    

    // c: (1 - ((2*l - 1)*clamp(-1,(2*l - 1)*999,1)))*s;
    // d: h - (clamp(0,((h - 120)*999) + 1,1) + clamp(0,((h - 240)*999) + 1,1) + clamp(0,((h - 360)*999) + 1,1))*120;

    // x: c*(1 - (((d/60) - 1)*clamp(-1,((d/60) - 1)*999,1)));
    // (with d) x: c*(1 - ((((h - (clamp(0,((h - 120)*999) + 1,1) + clamp(0,((h - 240)*999) + 1,1) + clamp(0,((h - 360)*999) + 1,1))*120)/60) - 1)*clamp(-1,(((h - (clamp(0,((h - 120)*999) + 1,1) + clamp(0,((h - 240)*999) + 1,1) + clamp(0,((h - 360)*999) + 1,1))*120)/60) - 1)*999,1)));

    // m: l - c/2;
    // r: (m + (c*clamp(0,clamp(0,((h - 300)*999) + 1,1)*clamp(0,(360 - h)*999,1) + clamp(0,((h - 0)*999) + 1,1)*clamp(0,(60 - h)*999,1),1)) + (x*clamp(0,clamp(0,((h - 60)*999) + 1,1)*clamp(0,(120 - h)*999,1) + clamp(0,((h - 240)*999) + 1,1)*clamp(0,(300 - h)*999,1),1)))*255;
    // g: (m + (c*clamp(0,clamp(0,((h - 60)*999) + 1,1)*clamp(0,(120 - h)*999,1) + clamp(0,((h - 120)*999) + 1,1)*clamp(0,(180 - h)*999,1),1)) + (x*clamp(0,clamp(0,((h - 0)*999) + 1,1)*clamp(0,(60 - h)*999,1) + clamp(0,((h - 180)*999) + 1,1)*clamp(0,(240 - h)*999,1),1)))*255;
    // b: (m + (c*clamp(0,clamp(0,((h - 180)*999) + 1,1)*clamp(0,(240 - h)*999,1) + clamp(0,((h - 240)*999) + 1,1)*clamp(0,(300 - h)*999,1),1)) + (x*clamp(0,clamp(0,((h - 300)*999) + 1,1)*clamp(0,(360 - h)*999,1) + clamp(0,((h - 120)*999) + 1,1)*clamp(0,(180 - h)*999,1),1)))*255;

    

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};

    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    #{$cssvar-color}-c: string.unquote("calc((1 - ((2*var(#{$cssvar-color}-l) - 1)*clamp(-1,(2*var(#{$cssvar-color}-l) - 1)*999,1)))*var(#{$cssvar-color}-s))");
    #{$cssvar-color}-x: string.unquote("calc(var(#{$cssvar-color}-c)*(1 - ((((var(#{$cssvar-color}-h) - (clamp(0,((var(#{$cssvar-color}-h) - 120)*999) + 1,1) + clamp(0,((var(#{$cssvar-color}-h) - 240)*999) + 1,1) + clamp(0,((var(#{$cssvar-color}-h) - 360)*999) + 1,1))*120)/60) - 1)*clamp(-1,(((var(#{$cssvar-color}-h) - (clamp(0,((var(#{$cssvar-color}-h) - 120)*999) + 1,1) + clamp(0,((var(#{$cssvar-color}-h) - 240)*999) + 1,1) + clamp(0,((var(#{$cssvar-color}-h) - 360)*999) + 1,1))*120)/60) - 1)*999,1))))");

    #{$cssvar-color}-r: string.unquote("calc(((var(#{$cssvar-color}-l) - var(#{$cssvar-color}-c)/2) + (var(#{$cssvar-color}-c)*clamp(0,clamp(0,((var(#{$cssvar-color}-h) - 300)*999) + 1,1)*clamp(0,(360 - var(#{$cssvar-color}-h))*999,1) + clamp(0,((var(#{$cssvar-color}-h) - 0)*999) + 1,1)*clamp(0,(60 - var(#{$cssvar-color}-h))*999,1),1)) + (var(#{$cssvar-color}-x)*clamp(0,clamp(0,((var(#{$cssvar-color}-h) - 60)*999) + 1,1)*clamp(0,(120 - var(#{$cssvar-color}-h))*999,1) + clamp(0,((var(#{$cssvar-color}-h) - 240)*999) + 1,1)*clamp(0,(300 - var(#{$cssvar-color}-h))*999,1),1)))*255)");
    #{$cssvar-color}-g: string.unquote("calc(((var(#{$cssvar-color}-l) - var(#{$cssvar-color}-c)/2) + (var(#{$cssvar-color}-c)*clamp(0,clamp(0,((var(#{$cssvar-color}-h) - 60)*999) + 1,1)*clamp(0,(120 - var(#{$cssvar-color}-h))*999,1) + clamp(0,((var(#{$cssvar-color}-h) - 120)*999) + 1,1)*clamp(0,(180 - var(#{$cssvar-color}-h))*999,1),1)) + (var(#{$cssvar-color}-x)*clamp(0,clamp(0,((var(#{$cssvar-color}-h) - 0)*999) + 1,1)*clamp(0,(60 - var(#{$cssvar-color}-h))*999,1) + clamp(0,((var(#{$cssvar-color}-h) - 180)*999) + 1,1)*clamp(0,(240 - var(#{$cssvar-color}-h))*999,1),1)))*255)");
    #{$cssvar-color}-b: string.unquote("calc(((var(#{$cssvar-color}-l) - var(#{$cssvar-color}-c)/2) + (var(#{$cssvar-color}-c)*clamp(0,clamp(0,((var(#{$cssvar-color}-h) - 180)*999) + 1,1)*clamp(0,(240 - var(#{$cssvar-color}-h))*999,1) + clamp(0,((var(#{$cssvar-color}-h) - 240)*999) + 1,1)*clamp(0,(300 - var(#{$cssvar-color}-h))*999,1),1)) + (var(#{$cssvar-color}-x)*clamp(0,clamp(0,((var(#{$cssvar-color}-h) - 300)*999) + 1,1)*clamp(0,(360 - var(#{$cssvar-color}-h))*999,1) + clamp(0,((var(#{$cssvar-color}-h) - 120)*999) + 1,1)*clamp(0,(180 - var(#{$cssvar-color}-h))*999,1),1)))*255)");

}
@mixin cssvar-luminance($cssvar: $cssvar, $name: "color", $suffix: "") {
    // u = (
    //         (                         clamp(0,  26 - n, 1) *  n         / 2756  )
    //     + (  clamp(0, n -  27, 1) * clamp(0,  51 - n, 1) * (n - 15.3) / 1106  )
    //     + (  clamp(0, n -  52, 1) * clamp(0,  77 - n, 1) * (n - 30.5) / 634   )
    //     + (  clamp(0, n -  78, 1) * clamp(0, 102 - n, 1) * (n - 45.6) / 427   )
    //     + (  clamp(0, n - 103, 1) * clamp(0, 128 - n, 1) * (n - 60.5) / 314   )
    //     + (  clamp(0, n - 129, 1) * clamp(0, 153 - n, 1) * (n - 75.5) / 244   )
    //     + (  clamp(0, n - 154, 1) * clamp(0, 179 - n, 1) * (n - 90.4) / 197   )
    //     + (  clamp(0, n - 180, 1) * clamp(0, 204 - n, 1) * (n - 105)  / 163   )
    //     + (  clamp(0, n - 205, 1) * clamp(0, 230 - n, 1) * (n - 120)  / 139   )
    //     + (  clamp(0, n - 231, 1)                        * (n - 135)  / 120   )
    // )

    

    // u: ((clamp(0,26 - n,1)*n/2756) + (clamp(0,n - 27,1)*clamp(0,51 - n,1)*(n - 15.3)/1106) + (clamp(0,n - 52,1)*clamp(0,77 - n,1)*(n - 30.5)/634) + (clamp(0,n - 78,1)*clamp(0,102 - n,1)*(n - 45.6)/427) + (clamp(0,n - 103,1)*clamp(0,128 - n,1)*(n - 60.5)/314) + (clamp(0,n - 129,1)*clamp(0,153 - n,1)*(n - 75.5)/244) + (clamp(0,n - 154,1)*clamp(0,179 - n,1)*(n - 90.4)/197) + (clamp(0,n - 180,1)*clamp(0,204 - n,1)*(n - 105)/163) + (clamp(0,n - 205,1)*clamp(0,230 - n,1)*(n - 120)/139) + (clamp(0,n - 231,1)*(n - 135)/120))

    // ur: ((clamp(0,26 - r,1)*r/2756) + (clamp(0,r - 27,1)*clamp(0,51 - r,1)*(r - 15.3)/1106) + (clamp(0,r - 52,1)*clamp(0,77 - r,1)*(r - 30.5)/634) + (clamp(0,r - 78,1)*clamp(0,102 - r,1)*(r - 45.6)/427) + (clamp(0,r - 103,1)*clamp(0,128 - r,1)*(r - 60.5)/314) + (clamp(0,r - 129,1)*clamp(0,153 - r,1)*(r - 75.5)/244) + (clamp(0,r - 154,1)*clamp(0,179 - r,1)*(r - 90.4)/197) + (clamp(0,r - 180,1)*clamp(0,204 - r,1)*(r - 105)/163) + (clamp(0,r - 205,1)*clamp(0,230 - r,1)*(r - 120)/139) + (clamp(0,r - 231,1)*(r - 135)/120))
    // ug: ((clamp(0,26 - g,1)*g/2756) + (clamp(0,g - 27,1)*clamp(0,51 - g,1)*(g - 15.3)/1106) + (clamp(0,g - 52,1)*clamp(0,77 - g,1)*(g - 30.5)/634) + (clamp(0,g - 78,1)*clamp(0,102 - g,1)*(g - 45.6)/427) + (clamp(0,g - 103,1)*clamp(0,128 - g,1)*(g - 60.5)/314) + (clamp(0,g - 129,1)*clamp(0,153 - g,1)*(g - 75.5)/244) + (clamp(0,g - 154,1)*clamp(0,179 - g,1)*(g - 90.4)/197) + (clamp(0,g - 180,1)*clamp(0,204 - g,1)*(g - 105)/163) + (clamp(0,g - 205,1)*clamp(0,230 - g,1)*(g - 120)/139) + (clamp(0,g - 231,1)*(g - 135)/120))
    // ub: ((clamp(0,26 - b,1)*b/2756) + (clamp(0,b - 27,1)*clamp(0,51 - b,1)*(b - 15.3)/1106) + (clamp(0,b - 52,1)*clamp(0,77 - b,1)*(b - 30.5)/634) + (clamp(0,b - 78,1)*clamp(0,102 - b,1)*(b - 45.6)/427) + (clamp(0,b - 103,1)*clamp(0,128 - b,1)*(b - 60.5)/314) + (clamp(0,b - 129,1)*clamp(0,153 - b,1)*(b - 75.5)/244) + (clamp(0,b - 154,1)*clamp(0,179 - b,1)*(b - 90.4)/197) + (clamp(0,b - 180,1)*clamp(0,204 - b,1)*(b - 105)/163) + (clamp(0,b - 205,1)*clamp(0,230 - b,1)*(b - 120)/139) + (clamp(0,b - 231,1)*(b - 135)/120))

    // u: ((0.2126*((clamp(0,26 - r,1)*r/2756) + (clamp(0,r - 27,1)*clamp(0,51 - r,1)*(r - 15.3)/1106) + (clamp(0,r - 52,1)*clamp(0,77 - r,1)*(r - 30.5)/634) + (clamp(0,r - 78,1)*clamp(0,102 - r,1)*(r - 45.6)/427) + (clamp(0,r - 103,1)*clamp(0,128 - r,1)*(r - 60.5)/314) + (clamp(0,r - 129,1)*clamp(0,153 - r,1)*(r - 75.5)/244) + (clamp(0,r - 154,1)*clamp(0,179 - r,1)*(r - 90.4)/197) + (clamp(0,r - 180,1)*clamp(0,204 - r,1)*(r - 105)/163) + (clamp(0,r - 205,1)*clamp(0,230 - r,1)*(r - 120)/139) + (clamp(0,r - 231,1)*(r - 135)/120))) + (0.7152*((clamp(0,26 - g,1)*g/2756) + (clamp(0,g - 27,1)*clamp(0,51 - g,1)*(g - 15.3)/1106) + (clamp(0,g - 52,1)*clamp(0,77 - g,1)*(g - 30.5)/634) + (clamp(0,g - 78,1)*clamp(0,102 - g,1)*(g - 45.6)/427) + (clamp(0,g - 103,1)*clamp(0,128 - g,1)*(g - 60.5)/314) + (clamp(0,g - 129,1)*clamp(0,153 - g,1)*(g - 75.5)/244) + (clamp(0,g - 154,1)*clamp(0,179 - g,1)*(g - 90.4)/197) + (clamp(0,g - 180,1)*clamp(0,204 - g,1)*(g - 105)/163) + (clamp(0,g - 205,1)*clamp(0,230 - g,1)*(g - 120)/139) + (clamp(0,g - 231,1)*(g - 135)/120))) + (0.0722*((clamp(0,26 - b,1)*b/2756) + (clamp(0,b - 27,1)*clamp(0,51 - b,1)*(b - 15.3)/1106) + (clamp(0,b - 52,1)*clamp(0,77 - b,1)*(b - 30.5)/634) + (clamp(0,b - 78,1)*clamp(0,102 - b,1)*(b - 45.6)/427) + (clamp(0,b - 103,1)*clamp(0,128 - b,1)*(b - 60.5)/314) + (clamp(0,b - 129,1)*clamp(0,153 - b,1)*(b - 75.5)/244) + (clamp(0,b - 154,1)*clamp(0,179 - b,1)*(b - 90.4)/197) + (clamp(0,b - 180,1)*clamp(0,204 - b,1)*(b - 105)/163) + (clamp(0,b - 205,1)*clamp(0,230 - b,1)*(b - 120)/139) + (clamp(0,b - 231,1)*(b - 135)/120))));
    
    

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};
    
    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    #{$cssvar-color}-u: string.unquote("calc(((0.2126*((clamp(0,26 - var(#{$cssvar-color}-r),1)*var(#{$cssvar-color}-r)/2756) + (clamp(0,var(#{$cssvar-color}-r) - 27,1)*clamp(0,51 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 15.3)/1106) + (clamp(0,var(#{$cssvar-color}-r) - 52,1)*clamp(0,77 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 30.5)/634) + (clamp(0,var(#{$cssvar-color}-r) - 78,1)*clamp(0,102 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 45.6)/427) + (clamp(0,var(#{$cssvar-color}-r) - 103,1)*clamp(0,128 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 60.5)/314) + (clamp(0,var(#{$cssvar-color}-r) - 129,1)*clamp(0,153 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 75.5)/244) + (clamp(0,var(#{$cssvar-color}-r) - 154,1)*clamp(0,179 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 90.4)/197) + (clamp(0,var(#{$cssvar-color}-r) - 180,1)*clamp(0,204 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 105)/163) + (clamp(0,var(#{$cssvar-color}-r) - 205,1)*clamp(0,230 - var(#{$cssvar-color}-r),1)*(var(#{$cssvar-color}-r) - 120)/139) + (clamp(0,var(#{$cssvar-color}-r) - 231,1)*(var(#{$cssvar-color}-r) - 135)/120))) + (0.7152*((clamp(0,26 - var(#{$cssvar-color}-g),1)*var(#{$cssvar-color}-g)/2756) + (clamp(0,var(#{$cssvar-color}-g) - 27,1)*clamp(0,51 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 15.3)/1106) + (clamp(0,var(#{$cssvar-color}-g) - 52,1)*clamp(0,77 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 30.5)/634) + (clamp(0,var(#{$cssvar-color}-g) - 78,1)*clamp(0,102 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 45.6)/427) + (clamp(0,var(#{$cssvar-color}-g) - 103,1)*clamp(0,128 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 60.5)/314) + (clamp(0,var(#{$cssvar-color}-g) - 129,1)*clamp(0,153 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 75.5)/244) + (clamp(0,var(#{$cssvar-color}-g) - 154,1)*clamp(0,179 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 90.4)/197) + (clamp(0,var(#{$cssvar-color}-g) - 180,1)*clamp(0,204 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 105)/163) + (clamp(0,var(#{$cssvar-color}-g) - 205,1)*clamp(0,230 - var(#{$cssvar-color}-g),1)*(var(#{$cssvar-color}-g) - 120)/139) + (clamp(0,var(#{$cssvar-color}-g) - 231,1)*(var(#{$cssvar-color}-g) - 135)/120))) + (0.0722*((clamp(0,26 - var(#{$cssvar-color}-b),1)*var(#{$cssvar-color}-b)/2756) + (clamp(0,var(#{$cssvar-color}-b) - 27,1)*clamp(0,51 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 15.3)/1106) + (clamp(0,var(#{$cssvar-color}-b) - 52,1)*clamp(0,77 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 30.5)/634) + (clamp(0,var(#{$cssvar-color}-b) - 78,1)*clamp(0,102 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 45.6)/427) + (clamp(0,var(#{$cssvar-color}-b) - 103,1)*clamp(0,128 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 60.5)/314) + (clamp(0,var(#{$cssvar-color}-b) - 129,1)*clamp(0,153 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 75.5)/244) + (clamp(0,var(#{$cssvar-color}-b) - 154,1)*clamp(0,179 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 90.4)/197) + (clamp(0,var(#{$cssvar-color}-b) - 180,1)*clamp(0,204 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 105)/163) + (clamp(0,var(#{$cssvar-color}-b) - 205,1)*clamp(0,230 - var(#{$cssvar-color}-b),1)*(var(#{$cssvar-color}-b) - 120)/139) + (clamp(0,var(#{$cssvar-color}-b) - 231,1)*(var(#{$cssvar-color}-b) - 135)/120)))))");

}
/* end: mixins */



/* begin: functions */
@function cssvar-hsl($cssvar: $cssvar, $name: "color", $suffix: "") {
    
    // @return hsl(
    //     calc(
    //         var(#{$cssvar-color}-h)
    //         * 1deg
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-s)
    //         * 100%
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-l)
    //         * 100%
    //     )
    // );

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};

    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    @return string.unquote("hsl(calc(var(#{$cssvar-color}-h)*1deg),calc(var(#{$cssvar-color}-s)*100%),calc(var(#{$cssvar-color}-l)*100%))");
}
@function cssvar-hsla($cssvar: $cssvar, $name: "color", $suffix: "") {

    // @return hsla(
    //     calc(
    //         var(#{$cssvar-color}-h)
    //         * 1deg
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-s)
    //         * 100%
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-l)
    //         * 100%
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-a)
    //         * 100%
    //     )
    // );

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};

    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    @return string.unquote("hsla(calc(var(#{$cssvar-color}-h)*1deg),calc(var(#{$cssvar-color}-s)*100%),calc(var(#{$cssvar-color}-l)*100%),calc(var(#{$cssvar-color}-a)*100%))");
}

@function cssvar-contrast-l($cssvar: $cssvar, $name: "color", $suffix: "") {

    // @return clamp(
    //     0,
    //     (var(#{$cssvar-color}-u) - var(#{$_cssvar}contrast-threshold)) * -9999
    //     ,1
    // );

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};

    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    @return string.unquote("clamp(0,(var(#{$cssvar-color}-u) - var(#{$_cssvar}contrast-threshold))*-9999,1)");
}
@function cssvar-contrast-hsl($cssvar: $cssvar, $name: "color", $suffix: "") {

    // @return hsl(
    //     calc(
    //         var(#{$cssvar-color}-h)
    //         * 1deg
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-s)
    //         * 100%
    //     ),
    //     calc(
    //         #{cssvar-contrast-l($cssvar: $cssvar, $name: $name, $suffix: $suffix)}
    //         * 100%
    //     )
    // );

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};

    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    @return string.unquote("hsl(calc(var(#{$cssvar-color}-h)*1deg),calc(var(#{$cssvar-color}-s)*100%),calc(#{cssvar-contrast-l($cssvar: $cssvar, $name: $name, $suffix: $suffix)}*100%))");
}
@function cssvar-contrast-hsla($cssvar: $cssvar, $name: "color", $suffix: "") {

    // @return hsla(
    //     calc(
    //         var(#{$cssvar-color}-h)
    //         * 1deg
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-s)
    //         * 100%
    //     ),
    //     calc(
    //         #{cssvar-contrast-l($cssvar: $cssvar, $name: $name, $suffix: $suffix)}
    //         * 100%
    //     ),
    //     calc(
    //         var(#{$cssvar-color}-a)
    //         * 100%
    //     )
    // );

    @if (string.not-empty($suffix)) { $suffix: "-" + $suffix; }
    $cssvar-color: #{$cssvar}#{$name}#{$suffix};

    // to avoid sass altering unnecessary whitespaces, we process the formula in formatted string first, then unwrap (unquote) the string:

    @return string.unquote("hsla(calc(var(#{$cssvar-color}-h)*1deg),calc(var(#{$cssvar-color}-s)*100%),calc(#{cssvar-contrast-l($cssvar: $cssvar, $name: $name, $suffix: $suffix)}*100%),calc(var(#{$cssvar-color}-a)*100%))");
}
/* end: functions */



/* begin: specialized style */
@mixin _bg-blur-fross-light($include) {
    backdrop-filter: blur(1px);
}
@mixin bg-blur-fross-light {
    @include _bg-blur-fross-light(true);
}
@include alias($alias) { @include selector.append("-bg-blur-fross-light") {
    @include _bg-blur-fross-light(false);
}}


@mixin _bg-blur-fross-glass($include) {
    backdrop-filter: blur(5px);
}
@mixin bg-blur-fross-glass {
    @include _bg-blur-fross-glass(true);
}
@include alias($alias) { @include selector.append("-bg-blur-fross-glass") {
    @include _bg-blur-fross-glass(false);
}}


@mixin _bg-blur-fross-thick($include) {
    backdrop-filter: blur(5px) blur(5px) blur(5px) blur(5px);
}
@mixin bg-blur-fross-thick {
    @include _bg-blur-fross-thick(true);
}
@include alias($alias) { @include selector.append("-bg-blur-fross-thick") {
    @include _bg-blur-fross-thick(false);
}}
/* end: specialized style */



/* begin: general style */
@mixin _style($include) {
    // @if ($include) { @include base.style; }
    // @else          { @extend #{base.$alias} !optional; }
}
@mixin style {
    @include _style(true);
}
@include alias($alias) {
    @include _style(false);
}
/* end: general style */



// utility class => no emit class
// @include class($alias, $class, base.$class);