@use "sass:color" as color;
@use "sass:list"  as list;
@use "sass:map"   as map;



// Color system

$white:    #ffffff !default;
$gray-100: #f8f9fa !default;
$gray-200: #e9ecef !default;
$gray-300: #dee2e6 !default;
$gray-400: #ced4da !default;
$gray-500: #adb5bd !default;
$gray-600: #6c757d !default;
$gray-700: #495057 !default;
$gray-800: #343a40 !default;
$gray-900: #212529 !default;
$black:    #000000 !default;



// Color contrast
// See https://github.com/twbs/bootstrap/pull/30168

// The contrast ratio to reach against white, to determine if color changes from "light" to "dark". Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
$contrast-ratio-min     : 4.45                                  !default;

// Customize the light and dark text colors for use in our color contrast function.
$contrast-dark-sass     : $black                                !default;
$contrast-light-sass    : $white                                !default;

$transp-var             :   0.25                                !default;

// A list of pre-calculated numbers of pow(($value / 255 + .055) / 1.055, 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;



/* begin: functions */
@function contrast($backg, $contrast-dark: $contrast-dark-sass, $contrast-light: $contrast-light-sass, $contrast-ratio-min: $contrast-ratio-min) {
  $foregs: $contrast-light, $contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregs {
      $contrast-ratio: contrast-ratio($backg, $color);

      @if $contrast-ratio>$contrast-ratio-min {
          @return $color;
      }

      @else if $contrast-ratio>$max-ratio {
          $max-ratio: $contrast-ratio;
          $max-ratio-color: $color;
      }
  }

  @warn "Found no color leading to #{$contrast-ratio-min}:1 contrast ratio against #{$backg}...";

  @return $max-ratio-color;
}

@function contrast-ratio($backg, $foreg: $contrast-light-sass) {
  $lum-backg: luminance($backg);
  $lum-foreg: luminance(opaque($backg, $foreg));

  @return if($lum-backg > $lum-foreg, ($lum-backg + .05) / ($lum-foreg + .05), ($lum-foreg + .05) / ($lum-backg + .05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $rgb: (
      "r": color.red($color),
      "g": color.green($color),
      "b": color.blue($color)
  );

  @each $name, $value in $rgb {
      $value  : if($value / 255 < .03928, $value / 255 / 12.92, list.nth($_luminance-list, $value + 1));
      $rgb    : map.merge($rgb, ($name: $value));
  }

  @return (map.get($rgb, "r") * .2126)+(map.get($rgb, "g") * .7152)+(map.get($rgb, "b") * .0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($backg, $foreg) {
  @return color.mix(rgba($foreg, 1), $backg, opacity($foreg) * 100);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint($color, $weight) {
  @return color.mix(white, $color, $weight);
}

// Shade a color: mix a color with black
@function shade($color, $weight) {
  @return color.mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift($color, $weight) {
  @return if($weight > 0, shade($color, $weight), tint($color, -$weight));
}
// scss-docs-end color-functions
/* end: functions */



// fusv-disable
$grays: (
  "100": $gray-100,
  "200": $gray-200,
  "300": $gray-300,
  "400": $gray-400,
  "500": $gray-500,
  "600": $gray-600,
  "700": $gray-700,
  "800": $gray-800,
  "900": $gray-900
) !default;
// fusv-enable

$blue:    #0d6efd !default;
$indigo:  #6610f2 !default;
$purple:  #6f42c1 !default;
$pink:    #d63384 !default;
$red:     #dc3545 !default;
$orange:  #fd7e14 !default;
$yellow:  #ffc107 !default;
$green:   #198754 !default;
$teal:    #20c997 !default;
$cyan:    #0dcaf0 !default;

// scss-docs-start colors-map
$colors: (
  "blue":       $blue,
  "indigo":     $indigo,
  "purple":     $purple,
  "pink":       $pink,
  "red":        $red,
  "orange":     $orange,
  "yellow":     $yellow,
  "green":      $green,
  "teal":       $teal,
  "cyan":       $cyan,
  "black":      $black,
  "white":      $white,
  "gray":       $gray-600,
  "gray-dark":  $gray-800
) !default;
// scss-docs-end colors-map

$colors-transp: () !default;
@if (($transp-var > 0) and ($transp-var < 1)) {
    @each $name, $value in $colors {
        @if (not map.has-key($colors-transp, $name)) { $colors-transp: map.merge($colors-transp, (
            #{$name}-transp: color.change($value, $alpha: $transp-var)
        ))};
    }
}
// @each $name, $value in $colors-transp {
//     @if (not map.has-key($colors, $name)) { $colors: map.merge($colors, (
//         #{$name} : #{$value}
//     ))}
// }

$primary:       $blue !default;
$secondary:     $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;

// scss-docs-start theme-colors-map
$themes: (
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
) !default;
// scss-docs-end theme-colors-map

$themes-transp: () !default;
@if (($transp-var > 0) and ($transp-var < 1)) {
    @each $name, $value in $themes {
        @if (not map.has-key($themes-transp, $name)) { $themes-transp: map.merge($themes-transp, (
            #{$name}-transp: color.change($value, $alpha: $transp-var)
        ))};
    }
}
// @each $name, $value in $themes-transp {
//     @if (not map.has-key($themes, $name)) { $themes: map.merge($themes, (
//         #{$name} : #{$value}
//     ))}
// }

// fusv-disable
$blue-100: tint($blue, 80%) !default;
$blue-200: tint($blue, 60%) !default;
$blue-300: tint($blue, 40%) !default;
$blue-400: tint($blue, 20%) !default;
$blue-500: $blue !default;
$blue-600: shade($blue, 20%) !default;
$blue-700: shade($blue, 40%) !default;
$blue-800: shade($blue, 60%) !default;
$blue-900: shade($blue, 80%) !default;

$indigo-100: tint($indigo, 80%) !default;
$indigo-200: tint($indigo, 60%) !default;
$indigo-300: tint($indigo, 40%) !default;
$indigo-400: tint($indigo, 20%) !default;
$indigo-500: $indigo !default;
$indigo-600: shade($indigo, 20%) !default;
$indigo-700: shade($indigo, 40%) !default;
$indigo-800: shade($indigo, 60%) !default;
$indigo-900: shade($indigo, 80%) !default;

$purple-100: tint($purple, 80%) !default;
$purple-200: tint($purple, 60%) !default;
$purple-300: tint($purple, 40%) !default;
$purple-400: tint($purple, 20%) !default;
$purple-500: $purple !default;
$purple-600: shade($purple, 20%) !default;
$purple-700: shade($purple, 40%) !default;
$purple-800: shade($purple, 60%) !default;
$purple-900: shade($purple, 80%) !default;

$pink-100: tint($pink, 80%) !default;
$pink-200: tint($pink, 60%) !default;
$pink-300: tint($pink, 40%) !default;
$pink-400: tint($pink, 20%) !default;
$pink-500: $pink !default;
$pink-600: shade($pink, 20%) !default;
$pink-700: shade($pink, 40%) !default;
$pink-800: shade($pink, 60%) !default;
$pink-900: shade($pink, 80%) !default;

$red-100: tint($red, 80%) !default;
$red-200: tint($red, 60%) !default;
$red-300: tint($red, 40%) !default;
$red-400: tint($red, 20%) !default;
$red-500: $red !default;
$red-600: shade($red, 20%) !default;
$red-700: shade($red, 40%) !default;
$red-800: shade($red, 60%) !default;
$red-900: shade($red, 80%) !default;

$orange-100: tint($orange, 80%) !default;
$orange-200: tint($orange, 60%) !default;
$orange-300: tint($orange, 40%) !default;
$orange-400: tint($orange, 20%) !default;
$orange-500: $orange !default;
$orange-600: shade($orange, 20%) !default;
$orange-700: shade($orange, 40%) !default;
$orange-800: shade($orange, 60%) !default;
$orange-900: shade($orange, 80%) !default;

$yellow-100: tint($yellow, 80%) !default;
$yellow-200: tint($yellow, 60%) !default;
$yellow-300: tint($yellow, 40%) !default;
$yellow-400: tint($yellow, 20%) !default;
$yellow-500: $yellow !default;
$yellow-600: shade($yellow, 20%) !default;
$yellow-700: shade($yellow, 40%) !default;
$yellow-800: shade($yellow, 60%) !default;
$yellow-900: shade($yellow, 80%) !default;

$green-100: tint($green, 80%) !default;
$green-200: tint($green, 60%) !default;
$green-300: tint($green, 40%) !default;
$green-400: tint($green, 20%) !default;
$green-500: $green !default;
$green-600: shade($green, 20%) !default;
$green-700: shade($green, 40%) !default;
$green-800: shade($green, 60%) !default;
$green-900: shade($green, 80%) !default;

$teal-100: tint($teal, 80%) !default;
$teal-200: tint($teal, 60%) !default;
$teal-300: tint($teal, 40%) !default;
$teal-400: tint($teal, 20%) !default;
$teal-500: $teal !default;
$teal-600: shade($teal, 20%) !default;
$teal-700: shade($teal, 40%) !default;
$teal-800: shade($teal, 60%) !default;
$teal-900: shade($teal, 80%) !default;

$cyan-100: tint($cyan, 80%) !default;
$cyan-200: tint($cyan, 60%) !default;
$cyan-300: tint($cyan, 40%) !default;
$cyan-400: tint($cyan, 20%) !default;
$cyan-500: $cyan !default;
$cyan-600: shade($cyan, 20%) !default;
$cyan-700: shade($cyan, 40%) !default;
$cyan-800: shade($cyan, 60%) !default;
$cyan-900: shade($cyan, 80%) !default;
// fusv-enable